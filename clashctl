#!/bin/bash

# --------------- confit start -----------------------
# clash path
clash_path="/home/youtirsin/clash"

# clash config path
config=$clash_path"/config"

proxy_endpoint="127.0.0.1:7890"

update_temp_file=$clash_path"/clash_new_config.yaml"

nohup_out=$clash_path"/clash.out"

controller_url="localhost:9090"
# --------------- confit end -------------------------


icon_error="ðŸ˜…"
icon_success="ðŸ˜Ž"


validate_config() {
  if [[ -z $clash_path ]]
  then
    echo "[validate_config] clash_path config not set."$icon_error
    return 1
  fi

  if [[ -z $config ]]
  then
    echo "[validate_config] config file path config not set."$icon_error
    return 1
  fi

  if [[ -z $proxy_endpoint ]]
  then
    echo "[validate_config] proxy endpoint config not set."$icon_error
    return 1
  fi

  if [[ -z $update_temp_file ]]
  then
    echo "[validate_config] update_temp_file config not set."$icon_error
    return 1
  fi

  if [[ -z $controller_url ]]
  then
    echo "[validate_config] external controller url config not set."$icon_error
    return 1
  fi

  return 0
}


find_clash() {
  clash=$(find $clash_path -name "clash-*")
  if [[ -z $clash ]]
  then
    echo "[find_clash] no clash executable found."$icon_error
    echo "[find_clash] executable name be like: clash-[os]-[arch]-[version]"
    return 1
  fi
  return 0
}


show_usage() {
  echo "Usage:"
  echo "bash ${BASH_SOURCE} [option] <param>"
  echo "Options:"
  echo "start                         start clash"
  echo "stop                          stop clash"
  echo "reload                        reload clash"
  echo "update <url>                  download config from <url> and reload clash"
  echo "proxies                       show proxy information"
  echo "switch [<selector>] <proxy>   switch proxy to <proxy> in <selector>, default selector is Proxies"
  echo "help                          show usage"
}


start() {
  echo "[start] stopping potential clash running behind"
  stop
  echo "[start] starting http(s) proxy at $proxy_endpoint"
  export http_proxy=$proxy_endpoint
  export https_proxy=$proxy_endpoint

  echo "[start] using clash $clash"
  nohup $clash -d $config > $nohup_out 2>&1 &

  sleep 2
  curl -s --connect-timeout 2 google.com > /dev/null
  if [[ $? != 0 ]]
  then
    echo "[start] failed to start clash."$icon_error
    stop
  else
    echo -e "[start] clash started."$icon_success
  fi
}


stop() {
  pkill -2 clash
  echo "[stop] stopped clash."

  unset http_proxy
  unset https_proxy
  echo "[stop] stopped http(s) proxy."

  echo "[stop] remove previous log file."
  rm $nohup_out
}


reload() {
  stop
  sleep 2
  start
}


update() {
  echo "[update] backing up the old config file."
  cp $config/config.yaml $config/config.yaml.backup

  echo "[update] fetching configuration from \""$1"\""
  wget $1 -O $update_temp_file
  if [[ $? != 0 ]]
  then
    echo "[update] failed to fetch configuration file."$icon_error
    return
  fi
  mv $update_temp_file $config/config.yaml

  reload
}


show_proxies() {
  curl $controller_url/proxies/$1
}


switch_proxy() {
  curl -X PUT --data "{\"name\": \"$2\"}" $controller_url/proxies/$1
  echo "[switch_proxy] switched proxy to \"$2\" in \"$1\"."$icon_success
}


main() {
  validate_config
  if [[ $? == 1 ]]
  then
    return
  fi

  find_clash
  if [[ $? == 1 ]]
  then
    return
  fi

  if [[ $# == 0 ]]
  then
    show_usage
  fi

  if [[ $1 == "start" ]]
  then
    echo "[main] starting..."
    start

  elif [[ $1 == "stop" ]]
  then
    echo "[main] stopping..."
    stop

  elif [[ $1 == "reload" ]]
  then
    echo "[main] reloading..."
    reload

  elif [[ $1 == "update" ]]
  then
    echo "[main] updating..."
    if [[ $# -lt 2 ]]
    then
      echo "[main] required <url> is missing."
      return
    fi
    update $2

  elif [[ $1 == "proxies" ]]
  then
    if [[ $# -lt 2 ]]
    then
      show_proxies Proxies
    else
      show_proxies $2
    fi

  elif [[ $1 == "switch" ]]
  then
    if [[ $# -lt 2 ]]
    then
      show_usage
      return
    fi

    if [[ $# -lt 3 ]]
    then
      switch_proxy Proxies $2
    else
      show_proxies $2 $3
    fi

  else
    show_usage
  fi
}


main $*
